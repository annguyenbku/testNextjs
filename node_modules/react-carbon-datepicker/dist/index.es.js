import React, { Component } from 'react';
import ReactDOM from 'react-dom';

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = "@import url('https://fonts.googleapis.com/css?family=Open+Sans:300,400,700&display=swap');\r\n\r\n.styles_CarbonDate__3o1KG {\r\n    float: left;\r\n    font-family: 'Open Sans', sans-serif;\r\n    font-weight: 400;\r\n    position: relative;\r\n}\r\n.styles_CarbonDate__3o1KG,\r\n.styles_CarbonDate__3o1KG * {\r\n    -webkit-touch-callout: none; /* iOS Safari */\r\n    -webkit-user-select: none;   /* Chrome/Safari/Opera */\r\n    -khtml-user-select: none;    /* Konqueror */\r\n    -moz-user-select: none;      /* Firefox */\r\n    -ms-user-select: none;       /* Internet Explorer/Edge */\r\n    user-select: none;           /* Non-prefixed version, currently */    \r\n}\r\n.styles_cdHead__1fhA6 {\r\n    float: left;\r\n    background: #eee;\r\n    border-radius: 30px;\r\n}\r\n.styles_cdhInputDate__2g0gV {\r\n    float: left;\r\n    width: 140px;\r\n    overflow: hidden;\r\n}\r\n.styles_cdhiDay__2oFNK {\r\n    display: block;\r\n    float: left;\r\n    width: 230px;\r\n    height: 35px;\r\n    line-height: 35px;\r\n    font-size: 12px;\r\n    font-family: 'Open Sans', sans-serif;\r\n    font-weight: 400;\r\n    padding:0 20px;\r\n    color: #444;\r\n    letter-spacing: 2px;\r\n    text-transform: uppercase;\r\n    border: none;\r\n    background: transparent;\r\n    cursor: pointer;\r\n}\r\n.styles_cdhiDay__2oFNK:focus{\r\n    outline: none;\r\n}\r\n.styles_cdBody__1iDI_{\r\n    float: left;\r\n    background: #fff;\r\n    box-shadow: 2px 3px 25px rgba(0,0,0,0.1);\r\n    position: absolute;\r\n    top: 40px;\r\n    left: 0;\r\n    padding: 10px;\r\n    border-radius: 25px;\r\n    z-index: 1;\r\n}\r\n.styles_cdbCalendar__Sz1sh{\r\n    float: left;\r\n    width: 380px;\r\n    position: relative;\r\n}\r\n.styles_cdbReminder__1NI3f{\r\n    float: left;\r\n    width: 100%;\r\n    padding: 0 20px 10px 20px;\r\n    box-sizing: border-box;\r\n    font-family: 'Open Sans', sans-serif; \r\n}\r\n.styles_cdbrDesc__2MuQ6{\r\n    float: left;\r\n    width: 100%;\r\n    padding: 10px;\r\n    box-sizing: border-box;\r\n    font-family: 'Open Sans', sans-serif;\r\n    font-weight: 400;\r\n    font-size: 12px;\r\n    font-style: italic;\r\n    color: #999;\r\n}\r\n.styles_cdbrName__2Uj9h{\r\n    float: left;\r\n    width: 100%;\r\n    padding: 0 10px;\r\n    box-sizing: border-box;\r\n    font-family: 'Open Sans', sans-serif;\r\n    font-weight: 200;\r\n    font-size: 25px;\r\n    color: #666;\r\n    position: relative;\r\n    padding-left: 25px\r\n}\r\n.styles_cdbrnTag__1bP47{\r\n    position: absolute;\r\n    height: 20px;\r\n    top: 8px;\r\n    left: 10px;\r\n    width: 3px;\r\n    border-radius: 10px;\r\n    background: #aaa;\r\n}\r\n.styles_cdbcYear__22-UR{\r\n    float: left;\r\n    width: 180px;\r\n    height: 50px;\r\n    margin-left: 100px;\r\n    border-radius: 20px;\r\n    position: relative;\r\n} \r\n.styles_cdbcyButton__3N6Oo:hover{\r\n    z-index: 1000;\r\n    cursor: pointer;\r\n} \r\n.styles_cdbcyButton__3N6Oo{\r\n    float: left;\r\n    width: 50px;\r\n    height: 50px;\r\n    position: relative;\r\n    border-radius: 50px;\r\n    line-height: 50px;\r\n    text-align: center;\r\n    font-size: 10px;\r\n    color: #aaa;\r\n    z-index: 1;\r\n    box-sizing: border-box;\r\n\r\n}\r\n.styles_cdbcyButton__3N6Oo:nth-last-child(1){\r\n    float: right;\r\n}\r\n.styles_cdbcyName__1tWr1{\r\n    float: left;\r\n    position: absolute;\r\n    left:50px;\r\n    right:50px;\r\n    top:0;\r\n    height: 50px;\r\n    line-height: 50px;\r\n    color: #666;\r\n    font-size: 25px;\r\n    text-align: center;\r\n    font-weight: 300;\r\n}\r\n.styles_cdbcMonth__2Bgix {\r\n    float: left;\r\n    color: #666;\r\n    width: 130px;\r\n    margin-left: 125px;\r\n    margin-top: -6px;\r\n    height: 20px;\r\n    border-radius: 5px;\r\n}\r\n.styles_cdbcMonthWidget__3_6tC{\r\n    float: left;\r\n    width: 100%;\r\n    height: 100%;\r\n    line-height: 20px;\r\n}\r\n.styles_cdbcmName__2Yi7P{\r\n    cursor: pointer;\r\n    z-index: 100;\r\n}\r\n.styles_cdbcmName__2Yi7P{\r\n    position: relative;\r\n    font-size: 14px;\r\n    text-align: center;\r\n    font-weight: 700;\r\n    border-radius: 10px;\r\n    z-index: 1;\r\n}\r\n.styles_cdbcmMonths__1qSab{\r\n    position: absolute;\r\n    top: -10px;\r\n    bottom: -10px;\r\n    left: -10px;\r\n    right: -10px;\r\n    background: rgba(255,255,255,0.8);\r\n    border-radius: 30px;\r\n    z-index: 20;\r\n    padding: 80px 50px 40px 50px;\r\n    box-sizing: border-box;\r\n}\r\n.styles_cdbcmmContainer__3ZSrZ{\r\n    float: left;\r\n    width: 100%;\r\n    height: 100%;\r\n    box-sizing: border-box; \r\n}\r\n.styles_cdbcmmBackdrop__1Ifgh{\r\n    position: absolute;\r\n    top:0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n}\r\n.styles_cdbcmmcItem__1zC2B{\r\n    float: left;\r\n    width: 33.3333%;\r\n    height: 25%;\r\n    padding: 5px;\r\n    box-sizing: border-box;\r\n    position: relative;\r\n    z-index: 10;\r\n}\r\n.styles_cdbcmmcItem__1zC2B span:hover{\r\n    cursor: pointer;\r\n}\r\n.styles_cdbcmmcItem__1zC2B span{\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    text-align: center;\r\n    width: 100%;\r\n    height: 100%;\r\n    text-transform: uppercase;\r\n    background: #fff;\r\n    font-size: 12px;\r\n    font-weight: 700;\r\n    border-radius: 3px;\r\n    background: #fafafa;\r\n}\r\n.styles_cdbcmmcItemActive__A7kxW span:hover,\r\n.styles_cdbcmmcItemActive__A7kxW span{\r\n    /* background: #c1e2c0; */\r\n}\r\n.styles_cdbcDay__2wsSj{\r\n    float: left;\r\n    width: 100%;\r\n    height: 340px;\r\n    position: relative;\r\n}\r\n.styles_cdbcdButton__3zymn i{\r\n    pointer-events: none;\r\n}\r\n.styles_cdbcdButton__3zymn{\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    text-align: center;\r\n    width: 40px;\r\n    border-radius: 30px;\r\n    position: absolute;\r\n    left: 0;\r\n    bottom: 0;\r\n    top: -60px;\r\n    font-size: 12px;\r\n    color: #aaa;\r\n}\r\n.styles_cdbcdButton__3zymn:nth-last-child(1){\r\n    left: auto;\r\n    right: 0;\r\n}\r\n.styles_cdbcdBody__12eIo{\r\n    float: left;\r\n    position: absolute;\r\n    top:10px;\r\n    left:50px;\r\n    right:50px;\r\n    bottom:20px;\r\n}\r\n.styles_cdbcdbHead__2iOtM{\r\n    float: left;\r\n    width: 100%;\r\n    height: 30px;\r\n}\r\n.styles_cdbcdbhValue__2DaHg{\r\n    float: left;\r\n    width: 14.285%;\r\n    height: 30px;\r\n    line-height: 30px;\r\n    text-align: center;\r\n    font-size: 10px;\r\n    color: #777;\r\n    font-weight: 700;\r\n}\r\n.styles_cdbcdbContainer__35mJQ{\r\n    float: left;\r\n    position: absolute;\r\n    top: 30px;\r\n    left:0;\r\n    right:0;\r\n    bottom:0;\r\n}\r\n.styles_cdbcdbcDay__2P5c9{\r\n    float: left;\r\n    width: 14.285%;\r\n    height: 16.6666%;\r\n    position: relative;\r\n}\r\n.styles_cdbcdbcDay__2P5c9 span:hover {\r\n    /* background: #f5f5f5; */\r\n    cursor: pointer;\r\n}\r\n.styles_cdbcdbcDay__2P5c9 span{\r\n    display: block;\r\n    float: left;\r\n    position: absolute;\r\n    width: 30px;\r\n    height: 30px;\r\n    line-height: 30px;\r\n    left:50%;\r\n    top: 50%;\r\n    margin-left: -15px;\r\n    margin-top: -15px;\r\n    text-align: center;\r\n    font-size: 11px;\r\n    font-weight: 300px;\r\n    color: #555;\r\n    border-radius: 100%;\r\n} \r\n.styles_cdbcdbcDayDisabled__2YJ2b {\r\n    pointer-events: none;\r\n}\r\n.styles_cdbcdbcdReminder__1BlWW{\r\n    position: absolute;\r\n    bottom: 11px;\r\n    left: 12px;\r\n    right: 12px;\r\n    height: 4px;\r\n    border-radius: 3px;\r\n    background: #aaa;\r\n    z-index: 10;\r\n    pointer-events: none\r\n}\r\n\r\n.styles_cdbcyYearWidget__3shex{\r\n    float: left;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n.styles_cdbcyyValue__OjmsX{\r\n    float: left;\r\n    width: 100%;\r\n    height: 34px;\r\n    margin-top: 8px;\r\n    line-height: 34px;\r\n    border-radius: 6px;\r\n    cursor: pointer;\r\n}\r\n.styles_cdbcyyYears__3zXjG{\r\n    float: left;\r\n    position: absolute;\r\n    left:-160px;\r\n    right: -160px;\r\n    top: -10px;\r\n    bottom: -365px;\r\n    background: linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0) 25%, rgba(255,255,255,1) 40%, rgba(255,255,255,1) 60%, rgba(255,255,255,0) 75%, rgba(255,255,255,0) 100%);\r\n    z-index: 100;\r\n    border-radius: 30px;\r\n    overflow: hidden;\r\n}\r\n.styles_cdbcyyyBackdrop__3sRsW{\r\n    position: absolute;\r\n    left:0;\r\n    top:0;\r\n    right:0;\r\n    bottom: 0;\r\n}\r\n.styles_cdbcyyyContainer__1e0k5{\r\n    float: left;\r\n    position: absolute;\r\n    top:0;\r\n    left: 140px;\r\n    bottom: 0;\r\n    right: 140px;\r\n    overflow: auto;\r\n    padding-top: 180px;\r\n    padding-bottom: 170px;   \r\n}\r\n.styles_cdbcyyyBody__2CbzB{\r\n    float: left;\r\n    position: absolute;\r\n    top:0;\r\n    left: 140px;\r\n    bottom: 0;\r\n    right: 140px;\r\n    padding-top: 180px;   \r\n    padding-bottom: 170px;   \r\n    pointer-events: none;\r\n    transition: 0.2s;\r\n    z-index: 10;\r\n}\r\n.styles_cdbcyyyPointer__WXRW5{\r\n    position: absolute;\r\n    top: 180px;\r\n    height: 60px;\r\n    background: rgba(0,0,0,0.02);\r\n    border-radius: 40px;\r\n    left: 105px;\r\n    right:105px;\r\n}\r\n.styles_cdbcyyyButton__3aU_o:hover{\r\n    cursor: pointer;\r\n    /* background: #f5f5f5; */\r\n}\r\n.styles_cdbcyyyButton__3aU_o{\r\n    position: absolute;\r\n    top: 50%;\r\n    margin-top: -27px;\r\n    right: 40px;\r\n    width: 50px;\r\n    height: 50px;\r\n    text-align: center;\r\n    color: #777;\r\n    border-radius: 100%;\r\n    font-size: 13px;\r\n    line-height: 50px;\r\n    background: #fff;\r\n}\r\n.styles_cdbcyyycItem__34g3C{\r\n    float: left;\r\n    width: 100%;\r\n    height: 60px;\r\n    line-height: 60px;\r\n    font-size: 30px;\r\n    text-align: center;\r\n    font-family: 'Open Sans', sans-serif;\r\n    font-weight: 100;\r\n    color: #999;\r\n    cursor: pointer;\r\n    transition: font-size 0.2s, color 0.2s;\r\n    position: relative;\r\n    z-index: 10;\r\n}\r\n.styles_cdbcyyycItemActive__1TW-D{\r\n    font-size: 44px;\r\n    color: #222;\r\n    pointer-events: none;\r\n    cursor: default;\r\n    z-index: 20;\r\n}\r\n.styles_cdbcyyycItemHover__3Dav5{\r\n    /* color: #666; */\r\n}\r\n\r\n.styles_carbonDateScroll__3jvMs::-webkit-scrollbar{ width: 0; height:0; }\r\n.styles_carbonDateScroll__3jvMs:hover::-webkit-scrollbar{ width: 0; height:0; }\r\n.styles_carbonDateScroll__3jvMs::-webkit-scrollbar-button{}\r\n.styles_carbonDateScroll__3jvMs::-webkit-scrollbar-track{}\r\n.styles_carbonDateScroll__3jvMs::-webkit-scrollbar-track-piece{}\r\n.styles_carbonDateScroll__3jvMs::-webkit-scrollbar-thumb{ background: rgba(255,255,255,0);}\r\n.styles_carbonDateScroll__3jvMs:hover::-webkit-scrollbar-thumb{ background: rgba(255,255,255,0);}\r\n.styles_carbonDateScroll__3jvMs::-webkit-scrollbar-corner{}\r\n.styles_carbonDateScroll__3jvMs::-webkit-resizer{}\r\n\r\n.styles_CarbonDateSquareEdge__2nXWz *{\r\n    border-radius: 0px!important;\r\n}\r\n\r\n\r\n.styles_cdbcybRightArrow__V2tYP,\r\n.styles_cdbcybLeftArrow__h6Y6p,\r\n.styles_cdbcdbRightArrow__2Cmc1,\r\n.styles_cdbcdbLeftArrow__1WjTt{\r\n    width: 6px;\r\n    height: 6px;\r\n    border-top: 2px solid #aaa;\r\n    border-right: 2px solid #aaa;\r\n    margin-left: 16px;\r\n    border-color: inherit;\r\n}\r\n.styles_cdbcybLeftArrow__h6Y6p,\r\n.styles_cdbcdbLeftArrow__1WjTt{\r\n    transform: rotate(-135deg);\r\n}\r\n.styles_cdbcybRightArrow__V2tYP,\r\n.styles_cdbcdbRightArrow__2Cmc1{ \r\n    transform: rotate(45deg);\r\n    margin-left: 14px;\r\n}\r\n\r\n.styles_cdbcybRightArrow__V2tYP,\r\n.styles_cdbcybLeftArrow__h6Y6p{\r\n    display: block;\r\n    float: left;\r\n}\r\n.styles_cdbcybLeftArrow__h6Y6p{\r\n    margin-left: 22px;\r\n    margin-top: 21px;\r\n}\r\n.styles_cdbcybRightArrow__V2tYP{\r\n    margin-left: 20px;\r\n    margin-top: 21px;\r\n}\r\n\r\n.styles_cdbcyyybCheck__Qbxnv{\r\n    position: absolute;\r\n    width: 9px;\r\n    height: 4px;\r\n    border-bottom: 2px solid #999;\r\n    border-left: 2px solid #999;\r\n    transform: rotate(-45deg);\r\n    top: 21px;\r\n    left: 19px;\r\n    border-color: inherit;\r\n}";
var styles = { "CarbonDate": "styles_CarbonDate__3o1KG", "cdHead": "styles_cdHead__1fhA6", "cdhInputDate": "styles_cdhInputDate__2g0gV", "cdhiDay": "styles_cdhiDay__2oFNK", "cdBody": "styles_cdBody__1iDI_", "cdbCalendar": "styles_cdbCalendar__Sz1sh", "cdbReminder": "styles_cdbReminder__1NI3f", "cdbrDesc": "styles_cdbrDesc__2MuQ6", "cdbrName": "styles_cdbrName__2Uj9h", "cdbrnTag": "styles_cdbrnTag__1bP47", "cdbcYear": "styles_cdbcYear__22-UR", "cdbcyButton": "styles_cdbcyButton__3N6Oo", "cdbcyName": "styles_cdbcyName__1tWr1", "cdbcMonth": "styles_cdbcMonth__2Bgix", "cdbcMonthWidget": "styles_cdbcMonthWidget__3_6tC", "cdbcmName": "styles_cdbcmName__2Yi7P", "cdbcmMonths": "styles_cdbcmMonths__1qSab", "cdbcmmContainer": "styles_cdbcmmContainer__3ZSrZ", "cdbcmmBackdrop": "styles_cdbcmmBackdrop__1Ifgh", "cdbcmmcItem": "styles_cdbcmmcItem__1zC2B", "cdbcmmcItemActive": "styles_cdbcmmcItemActive__A7kxW", "cdbcDay": "styles_cdbcDay__2wsSj", "cdbcdButton": "styles_cdbcdButton__3zymn", "cdbcdBody": "styles_cdbcdBody__12eIo", "cdbcdbHead": "styles_cdbcdbHead__2iOtM", "cdbcdbhValue": "styles_cdbcdbhValue__2DaHg", "cdbcdbContainer": "styles_cdbcdbContainer__35mJQ", "cdbcdbcDay": "styles_cdbcdbcDay__2P5c9", "cdbcdbcDayDisabled": "styles_cdbcdbcDayDisabled__2YJ2b", "cdbcdbcdReminder": "styles_cdbcdbcdReminder__1BlWW", "cdbcyYearWidget": "styles_cdbcyYearWidget__3shex", "cdbcyyValue": "styles_cdbcyyValue__OjmsX", "cdbcyyYears": "styles_cdbcyyYears__3zXjG", "cdbcyyyBackdrop": "styles_cdbcyyyBackdrop__3sRsW", "cdbcyyyContainer": "styles_cdbcyyyContainer__1e0k5", "cdbcyyyBody": "styles_cdbcyyyBody__2CbzB", "cdbcyyyPointer": "styles_cdbcyyyPointer__WXRW5", "cdbcyyyButton": "styles_cdbcyyyButton__3aU_o", "cdbcyyycItem": "styles_cdbcyyycItem__34g3C", "cdbcyyycItemActive": "styles_cdbcyyycItemActive__1TW-D", "cdbcyyycItemHover": "styles_cdbcyyycItemHover__3Dav5", "carbonDateScroll": "styles_carbonDateScroll__3jvMs", "CarbonDateSquareEdge": "styles_CarbonDateSquareEdge__2nXWz", "cdbcybRightArrow": "styles_cdbcybRightArrow__V2tYP", "cdbcybLeftArrow": "styles_cdbcybLeftArrow__h6Y6p", "cdbcdbRightArrow": "styles_cdbcdbRightArrow__2Cmc1", "cdbcdbLeftArrow": "styles_cdbcdbLeftArrow__1WjTt", "cdbcyyybCheck": "styles_cdbcyyybCheck__Qbxnv" };
styleInject(css);

var defaultTheme = {
    default: {
        squareEdge: false,
        background: '#fff',
        dateHeaderColor: '#777',
        button: {
            background: '#fff',
            color: '#999',
            hover: {
                background: '#f9f9f9',
                color: '#555'
            }
        },
        input: {
            background: '#f4f4f4',
            color: '#555'
        },
        year: {
            selector: {
                background: '#fff',
                pointerColor: 'rgba(0,0,0,0.03)',
                listItem: {
                    background: 'transparent',
                    color: '#999',
                    hover: {
                        background: 'transparent',
                        color: '#333'
                    },
                    active: {
                        background: 'transparent',
                        color: '#333',
                        hover: {
                            background: 'transparent',
                            color: '#222'
                        }
                    }
                },
                button: {
                    background: '#fff',
                    color: '#999',
                    hover: {
                        background: '#f9f9f9',
                        color: '#555'
                    }
                }
            },
            button: {
                background: '#fff',
                color: '#555',
                hover: {
                    background: '#f9f9f9',
                    color: '#222'
                }
            }
        },
        month: {
            button: {
                background: '#fff',
                color: '#555',
                hover: {
                    background: '#f9f9f9',
                    color: '#222'
                }
            },
            selector: {
                background: 'rgba(255,255,255,0.95)',
                button: {
                    background: 'transparent',
                    color: '#777',
                    hover: {
                        background: '#f5f5f5',
                        color: '#444'
                    },
                    active: {
                        background: '#c1e2c0',
                        color: '#555',
                        hover: {
                            background: '#b0d8af',
                            color: '#444'
                        }
                    }
                }
            }
        },
        date: {
            background: 'transparent',
            color: '#555',
            hover: {
                background: '#f9f9f9',
                color: '#333'
            },
            active: {
                // background: '#c1e2c0',
                background: '#ed1f4f',
                color: '#fff',
                hover: {
                    background: '#ed1f4f',
                    color: '#fff'
                }
            },
            highlight: {
                background: '#fde1e7',
                color: '#333',
                hover: {
                    background: '#fde1e7',
                    color: '#333'
                }
            },
            disabled: {
                opacity: 0.4,
                color: '#555',
                background: 'transparent'
            }
        },
        reminder: {
            headerColor: '#666',
            descriptionColor: '#999'
        }
    },

    /**
     * 
     *  Dark Theme
     * 
     */

    dark: {
        squareEdge: false,
        background: '#333',
        dateHeaderColor: '#aaa',
        button: {
            background: '#333',
            color: '#999',
            hover: {
                background: '#444',
                color: '#fff'
            }
        },
        input: {
            background: '#333',
            color: '#ccc'
        },
        year: {
            selector: {
                background: '#333',
                pointerColor: '#66af63',
                listItem: {
                    background: 'transparent',
                    color: '#aaa',
                    hover: {
                        background: 'transparent',
                        color: '#fff'
                    },
                    active: {
                        background: 'transparent',
                        color: '#fff',
                        hover: {
                            background: 'transparent',
                            color: '#fff'
                        }
                    }
                },
                button: {
                    background: '#333',
                    color: '#ccc',
                    hover: {
                        background: '#444',
                        color: '#fff'
                    }
                }
            },
            button: {
                background: '#333',
                color: '#ccc',
                hover: {
                    background: '#444',
                    color: '#fff'
                }
            }
        },
        month: {
            button: {
                background: '#333',
                color: '#ccc',
                hover: {
                    background: '#444',
                    color: '#fff'
                }
            },
            selector: {
                background: 'rgba(60,60,60,0.8)',
                button: {
                    background: '#555',
                    color: '#bbb',
                    hover: {
                        background: '#666',
                        color: '#fff'
                    },
                    active: {
                        background: '#66af63',
                        color: '#fff',
                        hover: {
                            background: '#79d075',
                            color: '#fff'
                        }
                    }
                }
            }
        },
        date: {
            background: 'transparent',
            color: '#ccc',
            hover: {
                background: '#444',
                color: '#fff'
            },
            active: {
                background: '#66af63',
                color: '#fff',
                hover: {
                    background: '#66af63',
                    color: '#fff'
                }
            },
            highlight: {
                background: '#8c5f34',
                color: '#ccc',
                hover: {
                    background: '#ab7541',
                    color: '#fff'
                }
            },
            disabled: {
                opacity: 0.4,
                color: '#ccc',
                background: 'transparent'
            }
        },
        reminder: {
            headerColor: '#ccc',
            descriptionColor: '#aaa'
        }
    }
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var ThemeHandler = function ThemeHandler(_ref) {
    var _this = this;

    var getThemeConfig = _ref.getThemeConfig;
    classCallCheck(this, ThemeHandler);

    this.getTheme = function (key) {
        var keyArr = key.split('.');
        var currentValue = _this.getThemeConfig();
        for (var idx in keyArr) {
            if (currentValue[keyArr[idx]] != null) {
                currentValue = currentValue[keyArr[idx]];
            } else {
                console.warn('Didnt found key', keyArr[idx], ' in ', key);
                currentValue = null;
                break;
            }
        }
        return currentValue != null ? currentValue : null;
    };

    this.getStyles = function (elementKey, args) {
        switch (elementKey) {
            case 'input':
                return {
                    color: _this.getTheme('input.color')
                };

            case 'inputHead':
                return {
                    background: _this.getTheme('input.background')
                };

            case 'background':
                return {
                    background: _this.getTheme('background')
                };

            case 'date':
                return {
                    opacity: args.day.valid ? 1 : _this.getTheme('date.disabled.opacity'),
                    color: args.day.valid ? args.active ? _this.getTheme('date.active.color') : args.highlight ? _this.getTheme('date.highlight.color') : _this.getTheme('date.color') : _this.getTheme('date.disabled.color'),
                    background: args.day.valid ? args.active ? _this.getTheme('date.active.background') : args.highlight ? _this.getTheme('date.highlight.background') : _this.getTheme('date.background') : _this.getTheme('date.disabled.background')
                };

            case 'dateHeader':
                return {
                    color: _this.getTheme('dateHeaderColor')
                };

            case 'yearSelectorBackground':
                return {
                    background: _this.getTheme('yearGradient')
                };

            case 'yearListItem':
                return {
                    background: args.active && args.hover ? _this.getTheme('year.selector.listItem.active.hover.background') : args.active ? _this.getTheme('year.selector.listItem.active.background') : args.hover ? _this.getTheme('year.selector.listItem.hover.background') : _this.getTheme('year.selector.listItem.background'),
                    color: args.active && args.hover ? _this.getTheme('year.selector.listItem.active.hover.color') : args.active ? _this.getTheme('year.selector.listItem.active.color') : args.hover ? _this.getTheme('year.selector.listItem.hover.color') : _this.getTheme('year.selector.listItem.color')
                };

            case 'pointerColor':
                return {
                    background: _this.getTheme('year.selector.pointerColor')
                };

            case 'monthSelector':
                return {
                    background: _this.getTheme('month.selector.background')
                };

            case 'button':
                return {
                    background: _this.getTheme('button.background'),
                    color: _this.getTheme('button.color'),
                    borderColor: _this.getTheme('button.color')
                };

            case 'year':
                return {
                    background: _this.getTheme('year.button.background'),
                    color: _this.getTheme('year.button.color')
                };

            case 'month':
                return {
                    background: _this.getTheme('month.button.background'),
                    color: _this.getTheme('month.button.color')
                };

            case 'yearSelectButton':
                return {
                    background: _this.getTheme('year.selector.button.background'),
                    color: _this.getTheme('year.selector.button.color'),
                    borderColor: _this.getTheme('year.selector.button.color')
                };

            case 'monthSelectorButton':
                return {
                    background: args.active ? _this.getTheme('month.selector.button.active.background') : _this.getTheme('month.selector.button.background'),
                    color: args.active ? _this.getTheme('month.selector.button.active.color') : _this.getTheme('month.selector.button.color')
                };

            case 'reminderName':
                return {
                    color: _this.getTheme('reminder.headerColor')
                };

            case 'reminderDesc':
                return {
                    color: _this.getTheme('reminder.descriptionColor')
                };

            default:
                return {};
        }
    };

    this.onBME = function (e) {
        var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'button';
        var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var callback = arguments[3];

        if (key === 'button') {
            e.target.style.color = _this.getTheme('button.hover.color');
            e.target.style.borderColor = _this.getTheme('button.hover.color');
            e.target.style.background = _this.getTheme('button.hover.background');
        } else if (key === 'year') {
            e.target.style.color = _this.getTheme('year.button.hover.color');
            e.target.style.background = _this.getTheme('year.button.hover.background');
        } else if (key === 'month') {
            e.target.style.color = _this.getTheme('month.button.hover.color');
            e.target.style.background = _this.getTheme('month.button.hover.background');
        } else if (key === 'yearSelectButton') {
            e.target.style.color = _this.getTheme('year.selector.button.hover.color');
            e.target.style.borderColor = _this.getTheme('year.selector.button.hover.color');
            e.target.style.background = _this.getTheme('year.selector.button.hover.background');
        } else if (key === 'monthSelectorButton') {
            e.target.style.color = args.active ? _this.getTheme('month.selector.button.active.hover.color') : _this.getTheme('month.selector.button.hover.color');
            e.target.style.background = args.active ? _this.getTheme('month.selector.button.active.hover.background') : _this.getTheme('month.selector.button.hover.background');
        } else if (key === 'dateItem') {
            e.target.style.color = args.active ? _this.getTheme('date.active.hover.color') : args.highlight ? _this.getTheme('date.highlight.hover.color') : _this.getTheme('date.hover.color');
            e.target.style.background = args.active ? _this.getTheme('date.active.hover.background') : args.highlight ? _this.getTheme('date.highlight.hover.background') : _this.getTheme('date.hover.background');
        }
        if (callback) callback(e);
    };

    this.onBML = function (e) {
        var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'button';
        var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var callback = arguments[3];

        if (key === 'button') {
            e.target.style.color = _this.getTheme('button.color');
            e.target.style.borderColor = _this.getTheme('button.color');
            e.target.style.background = _this.getTheme('button.background');
        }
        if (key === 'year') {
            e.target.style.color = _this.getTheme('year.button.color');
            e.target.style.background = _this.getTheme('year.button.background');
        } else if (key === 'month') {
            e.target.style.color = _this.getTheme('month.button.color');
            e.target.style.background = _this.getTheme('month.button.background');
        } else if (key === 'yearSelectButton') {
            e.target.style.color = _this.getTheme('year.selector.button.color');
            e.target.style.borderColor = _this.getTheme('year.selector.button.color');
            e.target.style.background = _this.getTheme('year.selector.button.background');
        } else if (key === 'monthSelectorButton') {
            e.target.style.color = args.active ? _this.getTheme('month.selector.button.active.color') : _this.getTheme('month.selector.button.color');
            e.target.style.background = args.active ? _this.getTheme('month.selector.button.active.background') : _this.getTheme('month.selector.button.background');
        } else if (key === 'dateItem') {
            e.target.style.color = args.active ? _this.getTheme('date.active.color') : args.highlight ? _this.getTheme('date.highlight.color') : _this.getTheme('date.color');
            e.target.style.background = args.active ? _this.getTheme('date.active.background') : args.highlight ? _this.getTheme('date.highlight.background') : _this.getTheme('date.background');
        }
        if (callback) callback(e);
    };

    this.getThemeConfig = getThemeConfig;
};

var daysMap = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

var getDayDetails = function getDayDetails(args) {
    var date = args.index - args.firstDay;
    var day = args.index % 7;
    var prevMonth = args.month - 1;
    var prevYear = args.year;
    if (prevMonth < 0) {
        prevMonth = 11;
        prevYear--;
    }
    var prevMonthNumberOfDays = getNumberOfDays(prevYear, prevMonth);
    var _date = (date < 0 ? prevMonthNumberOfDays + date : date % args.numberOfDays) + 1;
    var valid = date >= 0 && date < args.numberOfDays ? 1 : 0;
    var timestamp = new Date(args.year, args.month, _date).getTime();
    return {
        date: _date,
        day: day,
        valid: valid,
        timestamp: timestamp,
        dayString: daysMap[day],
        reminder: args.reminders[timestamp] || null
    };
};

var getMonthDetails = function getMonthDetails(year, month, reminders) {
    var firstDay = new Date(year, month).getDay();
    var numberOfDays = getNumberOfDays(year, month);
    var monthArray = [];
    var currentDay = null;
    var index = 0;
    var reminderMap = {};

    for (var idx in reminders) {
        var tempDate = new Date(reminders[idx].timestamp);
        var startOfTheDay = new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate()).getTime();
        reminderMap[startOfTheDay] = reminders[idx];
    }

    for (var row = 0; row < 6; row++) {
        for (var col = 0; col < 7; col++) {
            currentDay = getDayDetails({
                index: index,
                numberOfDays: numberOfDays,
                firstDay: firstDay,
                year: year,
                month: month,
                reminders: reminderMap
            });
            monthArray.push(currentDay);
            index++;
        }
    }
    return monthArray;
};

var getNumberOfDays = function getNumberOfDays(year, month) {
    return 32 - new Date(year, month, 32).getDate();
};

var validateDate = function validateDate(year, month, date, hour, minute) {
    var jsDate = new Date();
    year = parseInt(!year ? jsDate.getFullYear() : year > 0 === false || year < 1970 ? 1970 : year, 10);
    month = parseInt(Math.max(1, Math.min(12, !month ? jsDate.getMonth() + 1 : month > 0 === false ? 1 : month)), 10);
    var maxDays = getNumberOfDays(year, month - 1);
    date = parseInt(Math.max(1, Math.min(maxDays, !date ? jsDate.getDate() : date > 0 === false ? 1 : date)), 10);
    hour = parseInt(Math.max(0, Math.min(23, !hour ? jsDate.getHours() : hour > 0 === false ? 0 : hour)), 10);
    minute = parseInt(Math.max(0, Math.min(59, !minute ? jsDate.getMinutes() : minute > 0 === false ? 0 : minute)), 10);
    return { year: year, month: month, date: date, hour: hour, minute: minute, yearTemp: year };
};

var inputRef = React.createRef();
var yearContainerRef = React.createRef();
var yearBodyRef = React.createRef();
var oneHour = 60 * 60 * 1000;
var oneDay = oneHour * 24;
var todayTimestamp = null;
function calculateTodayTimestamp() {
    todayTimestamp = Date.now() - Date.now() % oneDay - oneHour * 5.5;
    setTimeout(calculateTodayTimestamp, todayTimestamp + oneDay - Date.now() + 1000);
}
calculateTodayTimestamp();

var maxYear = 2050;
var minYear = 1970;
function generateAvailableYear() {
    var years = [];
    for (var startYear = minYear; startYear <= maxYear; startYear++) {
        years.push(startYear);
    }
    return years;
}
var availableYears = generateAvailableYear();

function h2r(hex, alpha) {
    var c;
    if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {
        c = hex.substring(1).split('');
        if (c.length == 3) {
            c = [c[0], c[0], c[1], c[1], c[2], c[2]];
        }
        c = '0x' + c.join('');
        return 'rgba(' + [c >> 16 & 255, c >> 8 & 255, c & 255].join(',') + ',' + alpha + ')';
    }
    throw new Error('Bad Hex');
}

var CarbonDate = function (_Component) {
    inherits(CarbonDate, _Component);

    function CarbonDate(props) {
        classCallCheck(this, CarbonDate);

        var _this = possibleConstructorReturn(this, (CarbonDate.__proto__ || Object.getPrototypeOf(CarbonDate)).call(this, props));

        _initialiseProps.call(_this);

        var dateData = _this.props.date ? _this.getDateFromDateString(_this.props.date) : null;
        var dateObject = dateData ? validateDate(dateData.year, dateData.month, dateData.date) : validateDate();
        var dateTimestamp = new Date(dateObject.year, dateObject.month - 1, dateObject.date).getTime();
        _this.themeHandler = new ThemeHandler({
            getThemeConfig: function getThemeConfig() {
                return _this.theme;
            }
        });
        _this.state = _extends({}, dateObject, {
            dateTimestamp: dateTimestamp,
            monthDetails: getMonthDetails(dateObject.year, dateObject.month - 1, _this.getReminders()),
            showCalendar: _this.getConfig('showCalendar'),
            alwaysShow: _this.getConfig('alwaysShow')
        });

        _this.theme = _extends({}, defaultTheme[_this.getConfig('themePreset') || 'default']);
        if (props.config && props.config.theme) {
            _this.updateTheme(props.config.theme);
        }
        _this.theme.yearGradient = _this.theme.yearGradient || _this.getYearGradient();

        return _this;
    }

    createClass(CarbonDate, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            window.addEventListener('click', this.addBackDrop);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            window.removeEventListener('click', this.addBackDrop);
        }

        /**
         * Getters
         */

        /**
         * Setters
         */

        /**
         * Validators
         */

        /**
         * Handlers
         */

        /**
         * Updaters
         */

        /**
         * 
         */

        /**
         * 
         */

        /**
         * Renderers
         */

    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            return React.createElement(
                'div',
                { className: styles.CarbonDate + ' ' + (this.getTheme('squareEdge') ? ' ' + styles.CarbonDateSquareEdge : '') },
                React.createElement(
                    'div',
                    { className: styles.cdHead, style: this.getStyles('inputHead') },
                    React.createElement(
                        'div',
                        { className: styles.cdhInputDate },
                        React.createElement('input', { type: 'date',
                            style: this.getStyles('input'),
                            defaultValue: this.getDateString(),
                            ref: inputRef,
                            onClick: function onClick() {
                                return _this2.setCalendarVisibility(true);
                            },
                            onChange: this.updateDateFromInput,
                            className: styles.cdhiDay })
                    )
                ),
                this.renderCalendar()
            );
        }
    }]);
    return CarbonDate;
}(Component);

var _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this.addBackDrop = function (e) {
        if (_this3.state.showCalendar && !ReactDOM.findDOMNode(_this3).contains(e.target)) {
            _this3.setCalendarVisibility(false);
        }
    };

    this.monthMap = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

    this.getReminders = function () {
        return _this3.props.config && _this3.props.config.reminders || [];
    };

    this.getYearGradient = function () {
        var c = _this3.getTheme('year.selector.background');
        return 'linear-gradient(90deg, ' + [[0.8, 0], [0.8, 25], [1, 40], [1, 60], [0.8, 75], [0.8, 100]].map(function (d) {
            return h2r(c, d[0]) + ' ' + d[1] + '%';
        }).join(', ') + ')';
    };

    this.getConfig = function (key) {
        return _this3.props.config && _this3.props.config[key];
    };

    this.getDateString = function () {
        return _this3.state.year + '-' + (_this3.state.month < 10 ? '0' : '') + _this3.state.month + '-' + (_this3.state.date < 10 ? '0' : '') + _this3.state.date;
    };

    this.getDateFromDateString = function (dateValue) {
        var dateData = dateValue.split('-').map(function (d) {
            return parseInt(d, 10);
        });
        if (dateData.length < 3) return null;

        var year = dateData[0];
        var month = dateData[1];
        var date = dateData[2];
        return { year: year, month: month, date: date };
    };

    this.getAvailableYears = function () {
        return availableYears;
    };

    this.getYearBodyStyles = function () {
        return {
            top: (_this3.state.yearTemp - minYear) * -60 + 'px'
        };
    };

    this.getDateStringFromTimestamp = function (timestamp) {
        var dateObject = new Date(timestamp);
        var month = dateObject.getMonth() + 1;
        var date = dateObject.getDate();
        return dateObject.getFullYear() + '-' + (month < 10 ? '0' + month : month) + '-' + (date < 10 ? '0' + date : date);
    };

    this.getDateFormatedString = function (timestamp) {
        var dateObject = new Date(timestamp);
        var month = dateObject.getMonth();
        var date = dateObject.getDate();
        return (date < 10 ? '0' + date : date) + ' ' + _this3.monthMap[month].substr(0, 3).toUpperCase() + ' ' + dateObject.getFullYear();
    };

    this.getStyles = function (elementKey, args) {
        return _this3.themeHandler.getStyles(elementKey, args);
    };

    this.getTheme = function (key) {
        return _this3.themeHandler.getTheme(key);
    };

    this.setYearTemp = function (year) {
        _this3.setState({ yearTemp: year });
    };

    this.setYear = function (year) {
        _this3.setState({ year: year }, function () {
            return setTimeout(function () {
                return _this3.setYearsVisibility(false);
            });
        });
    };

    this.setCalendar = function (year, month, date, hour, minute) {
        var dateObject = validateDate(year, month, date, hour, minute);
        _this3.setState(_extends({}, dateObject, {
            monthDetails: getMonthDetails(dateObject.year, dateObject.month - 1, _this3.getReminders())
        }), _this3.updateYearBodyScrollTop);
    };

    this.setDate = function (year, month, date) {
        var updatedFromInput = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

        var dateTimestamp = new Date(year, month, date).getTime();
        _this3.setState({ dateTimestamp: dateTimestamp }, function () {
            if (!updatedFromInput) {
                _this3.updateInputFromDate();
            }
            if (_this3.props.onChange) {
                _this3.props.onChange(dateTimestamp);
            }
        });
    };

    this.setCalendarVisibility = function (active) {
        if (active) {
            var date = _this3.getDateFromDateString(_this3.getDateStringFromTimestamp(_this3.state.dateTimestamp));
            _this3.setCalendar(date.year, date.month, date.date);
        }
        _this3.setState({ showCalendar: active, showMonth: false, showYears: false });
    };

    this.setMonthVisibility = function (active) {
        setTimeout(function () {
            return _this3.setState({ showMonth: active });
        }, 10);
    };

    this.setYearsVisibility = function (active) {
        setTimeout(function () {
            _this3.setState({ showYears: active, yearTemp: _this3.state.year }, _this3.updateYearBodyScrollTop);
        }, 10);
    };

    this.showReminder = function (day) {
        if (!day.reminder) return;

        _this3.setState({ reminder: day });
    };

    this.hideReminder = function () {
        if (!_this3.state.reminder) return;

        _this3.setState({ reminder: false });
    };

    this.isCurrentDay = function (day) {
        return day.valid && day.timestamp === todayTimestamp;
    };

    this.isSelectedDay = function (day) {
        return day.valid && day.timestamp === _this3.state.dateTimestamp;
    };

    this.onYearScroll = function () {
        var year = availableYears[Math.floor((yearContainerRef.current.scrollTop + 30) / 60)];
        if (_this3.state.yearTemp !== year) {
            _this3.setYearTemp(year);
        }
        clearTimeout(_this3.debounce);
        _this3.debounce = setTimeout(_this3.updateYearBodyScrollTop, 400);
    };

    this.onYearMouseLeave = function () {
        _this3.setState({ yearMouse: null });
    };

    this.onYearMouseEnter = function (year) {
        _this3.setState({ yearMouse: year });
    };

    this.onBME = function (e) {
        var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'button';
        var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var callback = arguments[3];

        _this3.themeHandler.onBME(e, key, args, callback);
    };

    this.onBML = function (e) {
        var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'button';
        var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var callback = arguments[3];

        _this3.themeHandler.onBML(e, key, args, callback);
    };

    this.updateDateFromInput = function () {
        var dateValue = inputRef.current.value;
        var dateData = _this3.getDateFromDateString(dateValue);
        if (dateData !== null) {
            _this3.setDate(dateData.year, dateData.month - 1, dateData.date, true);
            _this3.setCalendar(dateData.year, dateData.month, dateData.date);
        }
    };

    this.updateInputFromDate = function () {
        inputRef.current.value = _this3.getDateStringFromTimestamp(_this3.state.dateTimestamp);
    };

    this.updateYearBodyScrollTop = function () {
        if (yearContainerRef && yearContainerRef.current) {
            yearContainerRef.current.scrollTop = (_this3.state.yearTemp - minYear) * 60;
        }
    };

    this.updateTheme = function (theme) {
        if (!theme) return;
        _this3.updateThemeRecursive(_this3.theme, theme);
        _this3.forceUpdate();
    };

    this.updateThemeRecursive = function (themeStruct, newTheme) {
        if (!newTheme) return;

        for (var idx in themeStruct) {
            if (!newTheme[idx]) continue;
            if (!!themeStruct[idx] && themeStruct[idx].constructor === Object) {
                _this3.updateThemeRecursive(themeStruct[idx], newTheme[idx]);
            } else {
                themeStruct[idx] = newTheme[idx];
            }
        }
    };

    this.selectDate = function (day) {
        _this3.setDate(_this3.state.year, _this3.state.month - 1, day.date);
        _this3.setCalendarVisibility(false);
        _this3.setCalendar(_this3.state.year, _this3.state.month, day.date);
    };

    this.selectMonth = function (month) {
        _this3.setCalendar(_this3.state.year, month, _this3.state.date);
        _this3.setMonthVisibility(false);
    };

    this.changeYear = function (value) {
        var year = Math.max(1970, _this3.state.year + value);
        _this3.setCalendar(year, _this3.state.month, _this3.state.date);
    };

    this.changeMonth = function (value) {
        var month = _this3.state.month + value;
        var year = _this3.state.year;
        if (month < 1) {
            month = 12;
            year--;
        } else if (month > 12) {
            month = 1;
            year++;
        }
        _this3.setCalendar(year, month, _this3.state.date);
    };

    this.renderYearWidget = function () {
        return React.createElement(
            'div',
            { className: styles.cdbcyYearWidget },
            React.createElement(
                'div',
                { className: styles.cdbcyyValue, style: _this3.getStyles('year'),
                    onMouseEnter: function onMouseEnter(e) {
                        return _this3.onBME(e, 'year');
                    },
                    onMouseLeave: function onMouseLeave(e) {
                        return _this3.onBML(e, 'year');
                    },
                    onClick: function onClick() {
                        return _this3.setYearsVisibility(true);
                    } },
                _this3.state.year
            ),
            _this3.state.showYears ? React.createElement(
                'div',
                { className: styles.cdbcyyYears, style: _this3.getStyles('yearSelectorBackground') },
                React.createElement('div', { className: styles.cdbcyyyBackdrop, onClick: function onClick() {
                        return _this3.setYearsVisibility(false);
                    } }),
                React.createElement('div', { className: styles.cdbcyyyPointer, style: _this3.getStyles('pointerColor') }),
                React.createElement(
                    'div',
                    { className: styles.cdbcyyyButton,
                        style: _this3.getStyles('yearSelectButton'),
                        onMouseEnter: function onMouseEnter(e) {
                            return _this3.onBME(e, 'yearSelectButton');
                        },
                        onMouseLeave: function onMouseLeave(e) {
                            return _this3.onBML(e, 'yearSelectButton');
                        },
                        onClick: function onClick() {
                            return _this3.setYear(_this3.state.yearTemp);
                        } },
                    React.createElement('span', { className: styles.cdbcyyybCheck })
                ),
                React.createElement(
                    'div',
                    { ref: yearContainerRef, className: styles.cdbcyyyContainer + ' ' + styles.carbonDateScroll, onScroll: _this3.onYearScroll },
                    _this3.getAvailableYears().map(function (year, index) {
                        return React.createElement('div', { className: styles.cdbcyyycItem,
                            onMouseEnter: function onMouseEnter() {
                                return _this3.onYearMouseEnter(year);
                            },
                            onMouseLeave: _this3.onYearMouseLeave,
                            key: index,
                            onClick: function onClick() {
                                return _this3.setYear(year);
                            } });
                    })
                ),
                React.createElement(
                    'div',
                    { ref: yearBodyRef, style: _this3.getYearBodyStyles(), className: styles.cdbcyyyBody },
                    _this3.getAvailableYears().map(function (year, index) {
                        return React.createElement(
                            'div',
                            { className: styles.cdbcyyycItem + ' ' + (_this3.state.yearTemp === year ? styles.cdbcyyycItemActive : ''),
                                key: index,
                                style: _this3.getStyles('yearListItem', { hover: _this3.state.yearMouse === year, active: _this3.state.yearTemp === year }) },
                            year
                        );
                    })
                )
            ) : ''
        );
    };

    this.renderMonthWidget = function () {
        return React.createElement(
            'div',
            { className: styles.cdbcMonthWidget },
            React.createElement(
                'div',
                { className: styles.cdbcmName,
                    onMouseEnter: function onMouseEnter(e) {
                        return _this3.onBME(e, 'month');
                    },
                    onMouseLeave: function onMouseLeave(e) {
                        return _this3.onBML(e, 'month');
                    },
                    style: _this3.getStyles('month'),
                    onClick: function onClick() {
                        return _this3.setMonthVisibility(true);
                    } },
                _this3.monthMap[_this3.state.month - 1]
            ),
            _this3.state.showMonth ? React.createElement(
                'div',
                { className: styles.cdbcmMonths, style: _this3.getStyles('monthSelector') },
                React.createElement(
                    'div',
                    { className: styles.cdbcmmContainer },
                    React.createElement('div', { className: styles.cdbcmmBackdrop, onClick: function onClick() {
                            return _this3.setMonthVisibility(false);
                        } }),
                    _this3.monthMap.map(function (month, index) {
                        return React.createElement(
                            'div',
                            { className: styles.cdbcmmcItem + ' ' + (_this3.state.month === index + 1 ? styles.cdbcmmcItemActive : ''),
                                key: index },
                            React.createElement(
                                'span',
                                { onClick: function onClick() {
                                        return _this3.selectMonth(index + 1);
                                    },
                                    style: _this3.getStyles('monthSelectorButton', { active: _this3.state.month === index + 1 }),
                                    onMouseEnter: function onMouseEnter(e) {
                                        return _this3.onBME(e, 'monthSelectorButton', { active: _this3.state.month === index + 1 });
                                    },
                                    onMouseLeave: function onMouseLeave(e) {
                                        return _this3.onBML(e, 'monthSelectorButton', { active: _this3.state.month === index + 1 });
                                    } },
                                month.substr(0, 3)
                            )
                        );
                    })
                )
            ) : ''
        );
    };

    this.renderDays = function () {
        return _this3.state.monthDetails.map(function (day, index) {
            var active = _this3.isSelectedDay(day);
            var highlight = _this3.isCurrentDay(day);
            return React.createElement(
                'div',
                { className: styles.cdbcdbcDay + ' ' + (!day.valid ? styles.cdbcdbcDayDisabled : ''),
                    key: index },
                day.reminder && day.valid ? React.createElement('div', { className: styles.cdbcdbcdReminder, style: { background: day.reminder.color } }) : '',
                React.createElement(
                    'span',
                    { onClick: function onClick() {
                            return _this3.selectDate(day);
                        },
                        onMouseEnter: function onMouseEnter(e) {
                            return _this3.onBME(e, 'dateItem', { active: active, highlight: highlight }, function (e) {
                                return _this3.showReminder(day);
                            });
                        },
                        onMouseLeave: function onMouseLeave(e) {
                            return _this3.onBML(e, 'dateItem', { active: active, highlight: highlight }, function (e) {
                                return _this3.hideReminder();
                            });
                        },
                        style: _this3.getStyles('date', { day: day, active: active, highlight: highlight }) },
                    day.date
                )
            );
        });
    };

    this.renderCalendar = function () {
        return _this3.state.showCalendar || _this3.state.alwaysShow ? React.createElement(
            'div',
            { className: styles.cdBody, style: _this3.getStyles('background') },
            React.createElement(
                'div',
                { className: styles.cdbCalendar },
                React.createElement(
                    'div',
                    { className: styles.cdbcYear },
                    React.createElement(
                        'div',
                        { className: styles.cdbcyButton,
                            onMouseEnter: _this3.onBME,
                            onMouseLeave: _this3.onBML,
                            style: _this3.getStyles('button'),
                            onClick: function onClick() {
                                return _this3.changeYear(-1);
                            } },
                        React.createElement('span', { className: styles.cdbcybLeftArrow })
                    ),
                    React.createElement(
                        'div',
                        { className: styles.cdbcyName },
                        _this3.renderYearWidget()
                    ),
                    React.createElement(
                        'div',
                        { className: styles.cdbcyButton,
                            onMouseEnter: _this3.onBME,
                            onMouseLeave: _this3.onBML,
                            style: _this3.getStyles('button'),
                            onClick: function onClick() {
                                return _this3.changeYear(1);
                            } },
                        React.createElement('span', { className: styles.cdbcybRightArrow })
                    )
                ),
                React.createElement(
                    'div',
                    { className: styles.cdbcMonth },
                    _this3.renderMonthWidget()
                ),
                React.createElement(
                    'div',
                    { className: styles.cdbcDay },
                    React.createElement(
                        'div',
                        { className: styles.cdbcdButton,
                            onMouseEnter: _this3.onBME,
                            onMouseLeave: _this3.onBML,
                            style: _this3.getStyles('button'),
                            onClick: function onClick() {
                                return _this3.changeMonth(-1);
                            } },
                        React.createElement('span', { className: styles.cdbcdbLeftArrow })
                    ),
                    React.createElement(
                        'div',
                        { className: styles.cdbcdBody },
                        React.createElement(
                            'div',
                            { className: styles.cdbcdbHead },
                            ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'].map(function (d, i) {
                                return React.createElement(
                                    'div',
                                    { key: i, style: _this3.getStyles('dateHeader'), className: styles.cdbcdbhValue },
                                    d
                                );
                            })
                        ),
                        React.createElement(
                            'div',
                            { className: styles.cdbcdbContainer },
                            _this3.renderDays()
                        )
                    ),
                    React.createElement(
                        'div',
                        { className: styles.cdbcdButton,
                            onMouseEnter: _this3.onBME,
                            onMouseLeave: _this3.onBML,
                            style: _this3.getStyles('button'),
                            onClick: function onClick() {
                                return _this3.changeMonth(1);
                            } },
                        React.createElement('span', { className: styles.cdbcdbRightArrow })
                    )
                )
            ),
            _this3.state.reminder ? React.createElement(
                'div',
                { className: styles.cdbReminder },
                React.createElement(
                    'div',
                    { className: styles.cdbrName, style: _this3.getStyles('reminderName') },
                    React.createElement('span', { className: styles.cdbrnTag, style: { background: _this3.state.reminder.reminder.color } }),
                    _this3.getDateFormatedString(_this3.state.reminder.timestamp)
                ),
                React.createElement(
                    'div',
                    { className: styles.cdbrDesc, style: _this3.getStyles('reminderDesc') },
                    _this3.state.reminder.reminder.note
                )
            ) : ''
        ) : '';
    };
};

export default CarbonDate;
//# sourceMappingURL=index.es.js.map
